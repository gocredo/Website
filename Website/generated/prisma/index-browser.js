
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AboutPageScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  description: 'description',
  mission: 'mission',
  vision: 'vision',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  customerEmail: 'customerEmail',
  dateTime: 'dateTime',
  service: 'service',
  status: 'status',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId',
  businessId: 'businessId',
  timestamp: 'timestamp'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  imageUrl: 'imageUrl',
  businessId: 'businessId',
  createdAt: 'createdAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  dateTime: 'dateTime',
  customerName: 'customerName',
  service: 'service',
  businessId: 'businessId'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  phone: 'phone',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  address: 'address',
  phone: 'phone',
  websiteUrl: 'websiteUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  businessSettingsId: 'businessSettingsId'
};

exports.Prisma.BusinessInquiryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message'
};

exports.Prisma.BusinessSettingsScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  currency: 'currency',
  timezone: 'timezone',
  logoUrl: 'logoUrl'
};

exports.Prisma.CustomerUserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  donorName: 'donorName',
  amount: 'amount',
  date: 'date',
  businessId: 'businessId'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  message: 'message',
  businessId: 'businessId'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  token: 'token',
  businessId: 'businessId',
  expiresAt: 'expiresAt'
};

exports.Prisma.MediaGalleryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  mediaUrls: 'mediaUrls',
  businessId: 'businessId'
};

exports.Prisma.MenuScalarFieldEnum = {
  id: 'id',
  title: 'title',
  businessId: 'businessId'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  imageUrl: 'imageUrl',
  menuId: 'menuId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  type: 'type',
  items: 'items',
  totalAmount: 'totalAmount',
  status: 'status',
  customerUserId: 'customerUserId',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  method: 'method',
  status: 'status',
  initiatedAt: 'initiatedAt',
  verifiedAt: 'verifiedAt',
  paidAt: 'paidAt',
  referenceId: 'referenceId',
  razorpayOrderId: 'razorpayOrderId',
  razorpayPaymentId: 'razorpayPaymentId',
  razorpaySignature: 'razorpaySignature',
  receiptURL: 'receiptURL',
  customerRole: 'customerRole',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  stock: 'stock',
  tags: 'tags',
  description: 'description',
  imageUrl: 'imageUrl',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  location: 'location',
  imageUrl: 'imageUrl',
  businessId: 'businessId'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  customer: 'customer',
  rating: 'rating',
  comment: 'comment',
  businessId: 'businessId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  lastRenewed: 'lastRenewed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  businessId: 'businessId',
  websiteURLs: 'websiteURLs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clerkId: 'clerkId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.BusinessCategory = exports.$Enums.BusinessCategory = {
  RESTAURANT: 'RESTAURANT',
  SALON: 'SALON',
  BOUTIQUE: 'BOUTIQUE',
  TIFFIN: 'TIFFIN',
  GYM: 'GYM',
  EVENT_PLANNER: 'EVENT_PLANNER',
  COACHING: 'COACHING',
  INTERIOR: 'INTERIOR',
  PHOTOGRAPHER: 'PHOTOGRAPHER',
  REPAIR_SERVICE: 'REPAIR_SERVICE',
  REAL_ESTATE: 'REAL_ESTATE',
  PET_SERVICE: 'PET_SERVICE',
  HANDICRAFT: 'HANDICRAFT',
  FLORIST: 'FLORIST',
  CLINIC: 'CLINIC',
  TRAVEL: 'TRAVEL',
  FREELANCER: 'FREELANCER',
  BAKER: 'BAKER',
  NGO: 'NGO',
  JEWELLERY: 'JEWELLERY'
};

exports.OrderType = exports.$Enums.OrderType = {
  PRODUCT: 'PRODUCT',
  MENU_ITEM: 'MENU_ITEM',
  APPOINTMENT: 'APPOINTMENT',
  DONATION: 'DONATION',
  CUSTOM: 'CUSTOM'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  FULFILLED: 'FULFILLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CARD: 'CARD',
  UPI: 'UPI',
  CASH: 'CASH',
  WALLET: 'WALLET',
  NETBANKING: 'NETBANKING'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  BUSINESS_OWNER: 'BUSINESS_OWNER',
  STAFF: 'STAFF'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.Prisma.ModelName = {
  AboutPage: 'AboutPage',
  Appointment: 'Appointment',
  AuditLog: 'AuditLog',
  Blog: 'Blog',
  Booking: 'Booking',
  Branch: 'Branch',
  Business: 'Business',
  BusinessInquiry: 'BusinessInquiry',
  BusinessSettings: 'BusinessSettings',
  CustomerUser: 'CustomerUser',
  Donation: 'Donation',
  Inquiry: 'Inquiry',
  Invitation: 'Invitation',
  MediaGallery: 'MediaGallery',
  Menu: 'Menu',
  MenuItem: 'MenuItem',
  Order: 'Order',
  Payment: 'Payment',
  Plan: 'Plan',
  Product: 'Product',
  Property: 'Property',
  Review: 'Review',
  Subscription: 'Subscription',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
